// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"medicinal_share/main/entity"
)

func newUserData(db *gorm.DB, opts ...gen.DOOption) userData {
	_userData := userData{}

	_userData.userDataDo.UseDB(db, opts...)
	_userData.userDataDo.UseModel(&entity.UserData{})

	tableName := _userData.userDataDo.TableName()
	_userData.ALL = field.NewAsterisk(tableName)
	_userData.Id = field.NewInt(tableName, "id")
	_userData.Nickname = field.NewString(tableName, "nickname")
	_userData.UserId = field.NewInt64(tableName, "user_id")
	_userData.InfoId = field.NewInt64(tableName, "info_id")
	_userData.Avatar = field.NewInt64(tableName, "avatar")
	_userData.HelpNum = field.NewInt(tableName, "help_num")
	_userData.AvatarFile = userDataBelongsToAvatarFile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AvatarFile", "entity.FileData"),
		File: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AvatarFile.File", "entity.File"),
		},
	}

	_userData.RealInfo = userDataBelongsToRealInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RealInfo", "entity.RealInfo"),
	}

	_userData.fillFieldMap()

	return _userData
}

type userData struct {
	userDataDo userDataDo

	ALL        field.Asterisk
	Id         field.Int
	Nickname   field.String
	UserId     field.Int64
	InfoId     field.Int64
	Avatar     field.Int64
	HelpNum    field.Int
	AvatarFile userDataBelongsToAvatarFile

	RealInfo userDataBelongsToRealInfo

	fieldMap map[string]field.Expr
}

func (u userData) Table(newTableName string) *userData {
	u.userDataDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userData) As(alias string) *userData {
	u.userDataDo.DO = *(u.userDataDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userData) updateTableName(table string) *userData {
	u.ALL = field.NewAsterisk(table)
	u.Id = field.NewInt(table, "id")
	u.Nickname = field.NewString(table, "nickname")
	u.UserId = field.NewInt64(table, "user_id")
	u.InfoId = field.NewInt64(table, "info_id")
	u.Avatar = field.NewInt64(table, "avatar")
	u.HelpNum = field.NewInt(table, "help_num")

	u.fillFieldMap()

	return u
}

func (u *userData) WithContext(ctx context.Context) IUserDataDo { return u.userDataDo.WithContext(ctx) }

func (u userData) TableName() string { return u.userDataDo.TableName() }

func (u userData) Alias() string { return u.userDataDo.Alias() }

func (u *userData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userData) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.Id
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["info_id"] = u.InfoId
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["help_num"] = u.HelpNum

}

func (u userData) clone(db *gorm.DB) userData {
	u.userDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userData) replaceDB(db *gorm.DB) userData {
	u.userDataDo.ReplaceDB(db)
	return u
}

type userDataBelongsToAvatarFile struct {
	db *gorm.DB

	field.RelationField

	File struct {
		field.RelationField
	}
}

func (a userDataBelongsToAvatarFile) Where(conds ...field.Expr) *userDataBelongsToAvatarFile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userDataBelongsToAvatarFile) WithContext(ctx context.Context) *userDataBelongsToAvatarFile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userDataBelongsToAvatarFile) Model(m *entity.UserData) *userDataBelongsToAvatarFileTx {
	return &userDataBelongsToAvatarFileTx{a.db.Model(m).Association(a.Name())}
}

type userDataBelongsToAvatarFileTx struct{ tx *gorm.Association }

func (a userDataBelongsToAvatarFileTx) Find() (result *entity.FileData, err error) {
	return result, a.tx.Find(&result)
}

func (a userDataBelongsToAvatarFileTx) Append(values ...*entity.FileData) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userDataBelongsToAvatarFileTx) Replace(values ...*entity.FileData) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userDataBelongsToAvatarFileTx) Delete(values ...*entity.FileData) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userDataBelongsToAvatarFileTx) Clear() error {
	return a.tx.Clear()
}

func (a userDataBelongsToAvatarFileTx) Count() int64 {
	return a.tx.Count()
}

type userDataBelongsToRealInfo struct {
	db *gorm.DB

	field.RelationField
}

func (a userDataBelongsToRealInfo) Where(conds ...field.Expr) *userDataBelongsToRealInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userDataBelongsToRealInfo) WithContext(ctx context.Context) *userDataBelongsToRealInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userDataBelongsToRealInfo) Model(m *entity.UserData) *userDataBelongsToRealInfoTx {
	return &userDataBelongsToRealInfoTx{a.db.Model(m).Association(a.Name())}
}

type userDataBelongsToRealInfoTx struct{ tx *gorm.Association }

func (a userDataBelongsToRealInfoTx) Find() (result *entity.RealInfo, err error) {
	return result, a.tx.Find(&result)
}

func (a userDataBelongsToRealInfoTx) Append(values ...*entity.RealInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userDataBelongsToRealInfoTx) Replace(values ...*entity.RealInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userDataBelongsToRealInfoTx) Delete(values ...*entity.RealInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userDataBelongsToRealInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a userDataBelongsToRealInfoTx) Count() int64 {
	return a.tx.Count()
}

type userDataDo struct{ gen.DO }

type IUserDataDo interface {
	gen.SubQuery
	Debug() IUserDataDo
	WithContext(ctx context.Context) IUserDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDataDo
	WriteDB() IUserDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDataDo
	Not(conds ...gen.Condition) IUserDataDo
	Or(conds ...gen.Condition) IUserDataDo
	Select(conds ...field.Expr) IUserDataDo
	Where(conds ...gen.Condition) IUserDataDo
	Order(conds ...field.Expr) IUserDataDo
	Distinct(cols ...field.Expr) IUserDataDo
	Omit(cols ...field.Expr) IUserDataDo
	Join(table schema.Tabler, on ...field.Expr) IUserDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDataDo
	Group(cols ...field.Expr) IUserDataDo
	Having(conds ...gen.Condition) IUserDataDo
	Limit(limit int) IUserDataDo
	Offset(offset int) IUserDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDataDo
	Unscoped() IUserDataDo
	Create(values ...*entity.UserData) error
	CreateInBatches(values []*entity.UserData, batchSize int) error
	Save(values ...*entity.UserData) error
	First() (*entity.UserData, error)
	Take() (*entity.UserData, error)
	Last() (*entity.UserData, error)
	Find() ([]*entity.UserData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserData, err error)
	FindInBatches(result *[]*entity.UserData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDataDo
	Assign(attrs ...field.AssignExpr) IUserDataDo
	Joins(fields ...field.RelationField) IUserDataDo
	Preload(fields ...field.RelationField) IUserDataDo
	FirstOrInit() (*entity.UserData, error)
	FirstOrCreate() (*entity.UserData, error)
	FindByPage(offset int, limit int) (result []*entity.UserData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterById(id int64) (result *entity.UserData, err error)
}

//FilterById
//
//select * from @@table where id = @id
func (u userDataDo) FilterById(id int64) (result *entity.UserData, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from user_data where id = ? ")

	var executeSQL *gorm.DB

	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (u userDataDo) Debug() IUserDataDo {
	return u.withDO(u.DO.Debug())
}

func (u userDataDo) WithContext(ctx context.Context) IUserDataDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDataDo) ReadDB() IUserDataDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDataDo) WriteDB() IUserDataDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDataDo) Session(config *gorm.Session) IUserDataDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDataDo) Clauses(conds ...clause.Expression) IUserDataDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDataDo) Returning(value interface{}, columns ...string) IUserDataDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDataDo) Not(conds ...gen.Condition) IUserDataDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDataDo) Or(conds ...gen.Condition) IUserDataDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDataDo) Select(conds ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDataDo) Where(conds ...gen.Condition) IUserDataDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserDataDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userDataDo) Order(conds ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDataDo) Distinct(cols ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDataDo) Omit(cols ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDataDo) Join(table schema.Tabler, on ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDataDo) Group(cols ...field.Expr) IUserDataDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDataDo) Having(conds ...gen.Condition) IUserDataDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDataDo) Limit(limit int) IUserDataDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDataDo) Offset(offset int) IUserDataDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDataDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDataDo) Unscoped() IUserDataDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDataDo) Create(values ...*entity.UserData) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDataDo) CreateInBatches(values []*entity.UserData, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDataDo) Save(values ...*entity.UserData) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDataDo) First() (*entity.UserData, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserData), nil
	}
}

func (u userDataDo) Take() (*entity.UserData, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserData), nil
	}
}

func (u userDataDo) Last() (*entity.UserData, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserData), nil
	}
}

func (u userDataDo) Find() ([]*entity.UserData, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserData), err
}

func (u userDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserData, err error) {
	buf := make([]*entity.UserData, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDataDo) FindInBatches(result *[]*entity.UserData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDataDo) Attrs(attrs ...field.AssignExpr) IUserDataDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDataDo) Assign(attrs ...field.AssignExpr) IUserDataDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDataDo) Joins(fields ...field.RelationField) IUserDataDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDataDo) Preload(fields ...field.RelationField) IUserDataDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDataDo) FirstOrInit() (*entity.UserData, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserData), nil
	}
}

func (u userDataDo) FirstOrCreate() (*entity.UserData, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserData), nil
	}
}

func (u userDataDo) FindByPage(offset int, limit int) (result []*entity.UserData, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDataDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDataDo) Delete(models ...*entity.UserData) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDataDo) withDO(do gen.Dao) *userDataDo {
	u.DO = *do.(*gen.DO)
	return u
}
